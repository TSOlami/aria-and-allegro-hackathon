# -*- coding: utf-8 -*-
"""Copy of travel-with-aria-and-allegro.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gzskb8wYtiZsppl_HK26Pai2tU1AgFgP

# Building an App with Aria and Allegro: Turning Travel Photos into Fun Fact Videos

### Install Dependencies and set environments
"""

!pip -qqq install openai requests

"""Import packages and store api key for ARIA"""

from google.colab import userdata

base_url = 'https://api.rhymes.ai/v1'
api_key = userdata.get('ARIA_API_KEY')

"""Initialize the OpenAI class with the stored values"""

from openai import OpenAI

client = OpenAI(
    base_url=base_url,
    api_key=api_key
)

"""### Image Analysis with ARIA API"""

import base64

def image_to_base64(image_path):
    """
    Converts an image to a base64-encoded string.

    Args:
        image_path (str): The path to the image file.

    Returns:
        str: The base64-encoded string of the image.
    """
    try:
        with open(image_path, "rb") as image_file:
            base64_string = base64.b64encode(image_file.read()).decode("utf-8")
        return base64_string
    except FileNotFoundError:
        return "Image file not found. Please check the path."
    except Exception as e:
        return f"An error occurred: {str(e)}"

"""Analyze the image provided and get scences to be shown by **Allegro**"""

from textwrap import dedent
base64_image = image_to_base64('/content/image.webp')

response = client.chat.completions.create(
    model="aria",
    messages=[
        {
            "role": "user",
            "content": [
                {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}},
                {"type": "text", "text": dedent("""\
                <image>\nThis is an image of a place. Give three scenes and descriptions to bring it to life. Format:

                Scene <number>: <engaging description>

                Return 3 scenes in that format only.
                """)}
            ]
        }
    ],
    stream=False,
    temperature=0.6,
    max_tokens=1024,
    top_p=1,
    stop=["<|im_end|>"]
)


result = response.choices[0].message.content

print(result)

"""### Create Video Task

Function to start a video task and return the request id for the task.
"""

import requests
from textwrap import dedent

def generate_video(token: str, result_scenes: str):
    url = "https://api.rhymes.ai/v1/generateVideoSyn"
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    data = {
        "refined_prompt": result_scenes,
        "num_step": 100,
        "cfg_scale": 7.5,
        "user_prompt": result_scenes,
        "rand_seed": 12345
    }

    try:
        response = requests.post(url, headers=headers, json=data)
        # Check if the request was successful
        response.raise_for_status()
        return response.json()  # Return the JSON response
    except requests.exceptions.RequestException as e:
        return f"An error occurred: {str(e)}"

"""Query the function with the result gotten from the ARIA multimodal api"""

from google.colab import userdata
# Replace 'your_bearer_token_here' with the actual token
bearer_token = userdata.get('ALLEGRO_API_KEY')
response_data = generate_video(bearer_token, result)
request_id = response_data.get('data')
print(request_id)

"""### Query Video Task Status

Function to get the video link based on the request id gotten. This function automatically waits for **2minutes** before returning a value
"""

import requests
import time

def query_video_status(token, request_id):
    # Wait for at least 2 minutes (120 seconds)
    time.sleep(120)

    url = "https://api.rhymes.ai/v1/videoQuery"
    headers = {
        "Authorization": f"Bearer {token}",
    }
    params = {
        "requestId": request_id  # Add the requestId as a query parameter
    }

    try:
        response = requests.get(url, headers=headers, params=params)
        # Check if the request was successful
        response.raise_for_status()
        return response.json()  # Return the JSON response
    except requests.exceptions.RequestException as e:
        return f"An error occurred: {str(e)}"

"""Wait for at least **2 minutes** before querying for the video link. When the video is ready, a link to an S3 bucket where the video is located will be displayed; otherwise, an empty string is returned."""

response_data = query_video_status(bearer_token, request_id)
video_link = response_data.get('data')
print(video_link)

video_link